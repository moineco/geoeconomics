[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geoinformation with R",
    "section": "",
    "text": "Preface\nWe have entered the age of geoeconomics, in which the global economy has become fused with geopolitical strategy. Geoeconomics have impact not only on the public policy, but also on the management of private sector companies that do business globally. Hundreds of thousands of organizations are using geographic information system (GIS) to make maps that communicate, perform analysis, share information, and solve complex problems around the world. This geoeconomics course basically deals with GIS, a spatial system that creates, manages, analyzes, and maps all types of data. Every day, GIS powers millions of decisions around the world. It makes a big impact on our lives and you might not even realize it.\n\n\n\n\n\nThis lecture is for the readers who want to analyze, visualize and model geographic data with open source software. It is based on R and Python that has powerful data processing, visualization and geospatial capabilities. The lecture is divided into three parts:\n\nPart I: Foundations, aimed at getting you up-to-speed with geographic data in R\nPart II: Extensions, which covers intermediate techniques\nPart III: Applications, to real-world problems\n\nGeo-computation with R and Python will equip you with knowledge and skills to tackle a wide range of issues, including those with scientific, societal and environmental implications, manifested in geographic data.\n\nClass schedule in 1Q:\n\nMonday from 10:30 AM to 12:00 PM\nThursday from 10:30 AM to 12:00 PM\n\nClass room: A204, Eikokuji Campus, Kochi University of Technology\n\n\nGrading\nYour grade evaluation will depend on following three factors:\n\n\n\nPerformance\nWeight\n\n\n\n\na. Attendance\n10%\n\n\nb. Answering the assignments.\n40%\n\n\nc. Final examination (TBA)\n50%\n\n\n\n\n\nAssignment submission\nRegarding the assignments, you have to write in English to get evaluated. Writing with logical explanation and examples are the main criteria of evaluation. If you can create exceptional arguments to support your discussion, I will provide bonus points for that assignment.\n\n\nInstructor\nMoinul Islam, Associate Professor, Research Institute for Future Design & School of Economics and Management, Kochi University of Technology, Japan.\nOffice hours: By appointment, please email.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "lecture_5.html",
    "href": "lecture_5.html",
    "title": "5  Population distribution of Tokyo",
    "section": "",
    "text": "5.1 Population Map of Tokyo\nList of R packages used in this section:\ndf_tokyo_sf &lt;- jpn_pref(13, district = TRUE) %&gt;% \n  dplyr::filter(str_detect(city, \"区\"))\ndf_tokyo_sf %&gt;%\n  ggplot() +\n  geom_sf() +\n  theme_minimal()\nhead(df_tokyo_sf, 23)\n\nSimple feature collection with 23 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 139.5636 ymin: 35.52086 xmax: 139.919 ymax: 35.81758\nGeodetic CRS:  WGS 84\n# A tibble: 23 × 5\n   pref_code prefecture city_code city                                  geometry\n   &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;                       &lt;MULTIPOLYGON [°]&gt;\n 1 13        東京都     13101     千代田区 (((139.7299 35.68555, 139.7333 35.67…\n 2 13        東京都     13102     中央区   (((139.7589 35.65892, 139.7646 35.65…\n 3 13        東京都     13103     港区     (((139.7714 35.62304, 139.7825 35.62…\n 4 13        東京都     13104     新宿区   (((139.6735 35.71852, 139.679 35.718…\n 5 13        東京都     13105     文京区   (((139.7174 35.71455, 139.7232 35.71…\n 6 13        東京都     13106     台東区   (((139.7632 35.72184, 139.7685 35.71…\n 7 13        東京都     13107     墨田区   (((139.8095 35.68689, 139.812 35.688…\n 8 13        東京都     13108     江東区   (((139.7715 35.61667, 139.7712 35.61…\n 9 13        東京都     13109     品川区   (((139.7494 35.58876, 139.7559 35.58…\n10 13        東京都     13110     目黒区   (((139.6664 35.61861, 139.6631 35.61…\n# ℹ 13 more rows\ndf_tokyo_pop &lt;- read_csv(\"data/csv/tokyo_pop.csv\")\ndatatable(df_tokyo_pop)\nmerge_tokyo &lt;- df_tokyo_sf %&gt;% \n  left_join(df_tokyo_pop, by = \"city\") %&gt;% \n  st_as_sf()\nmerge_tokyo %&gt;% \n  head() %&gt;% \n  rmarkdown::paged_table()\nmap_pop_tokyo &lt;- merge_tokyo %&gt;% \n  ggplot() +\n  geom_sf(aes(fill = population)) +\n  scale_fill_distiller(name = \"Population\",\n                       palette = \"Greens\", direction = 1) +\n  theme_map(base_family = \"HiraginoSans-W3\") +\n  theme(legend.position = c(.1, -.1),\n        legend.direction = \"horizontal\",\n        legend.title = element_text(size = 15), \n        legend.text = element_text(size = 15),\n        legend.key.size = unit(1, \"cm\"),\n        legend.key.width = unit(3,\"cm\")) +\n  coord_sf(datum = NA) \n\nmap_pop_tokyo\n\n\n\n\nPopulation of Tokyo, Japan\nmap_pop_tokyo_text &lt;- merge_tokyo %&gt;% \n  mutate(\n    text_x = map_dbl(geometry, ~st_centroid(.x)[[1]]),\n    text_y = map_dbl(geometry, ~st_centroid(.x)[[2]])\n  ) %&gt;% \n  ggplot() +\n  geom_sf(aes(fill = population)) +\n  geom_label(aes(x = text_x, y = text_y, label = city), \n             size = 1.7, family = \"HiraginoSans-W3\") +\n  scale_fill_distiller(name = \"Population\",\n                       palette = \"Greens\", direction = 1) +\n  theme_map(base_family = \"HiraginoSans-W3\") +\n  theme(legend.position = c(.8, .05),\n        legend.title = element_text(size = 10), \n        legend.text = element_text(size = 5),\n        legend.key.size = unit(0.5, \"cm\"),\n        legend.key.width = unit(1,\"cm\")) +\n  coord_sf(datum = NA) \n\nmap_pop_tokyo_text\n\n\n\n\nPopulation of Tokyo, Japan\nggsave(\"fig/map_pop_tokyo_text.png\", map_pop_tokyo_text, width = 13, height = 13)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Population distribution of Tokyo</span>"
    ]
  },
  {
    "objectID": "lecture_5.html#population-map-of-tokyo",
    "href": "lecture_5.html#population-map-of-tokyo",
    "title": "5  Population distribution of Tokyo",
    "section": "",
    "text": "The prefecture code for Tokyo is 13. Now we can plot the map of the 23 wards of Tokyo\n\n\n\nDisplay the extracted map of Tokyo’s 23 wards\n\n\n\nCheck your data here\n\n\n\nImport the .CSV data to make an interactive population map of Tokyo\n\n\n\nMerge the spatial data with your population data\n\n\n\nCheck the merged data\n\n\n\nPlot your data with ggplot2\n\n\n\nPlot your population data with the name of the cities in Tokyo\n\n\n\nTo export the above figure, use the following code:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Population distribution of Tokyo</span>"
    ]
  },
  {
    "objectID": "lecture_6.html",
    "href": "lecture_6.html",
    "title": "6  US states and regions",
    "section": "",
    "text": "6.1 Using usmap package\nplot_usmap(regions = \"states\") + \n  labs(title = \"United States\",\n       subtitle = \"This is a map of the United States.\") + \n  theme(panel.background=element_blank())\nplot_usmap(regions = \"counties\") + \n  labs(title = \"U.S.A. counties\",\n       subtitle = \"This is a map of the United States.\") + \n  theme(panel.background=element_blank())\nplot_usmap(include = .south_region, exclude = c(\"VA\"), labels = TRUE)\nplot_usmap(include = .south_region, exclude = c(\"VA\"), labels = TRUE)\nplot_usmap(include = c(\"CT\", \"ME\", \"MA\", \"NH\", \"VT\")) +\n  labs(title = \"New England Region\") +\n  theme(panel.background = element_rect(color = \"black\"))",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>US states and regions</span>"
    ]
  },
  {
    "objectID": "lecture_6.html#using-usmap-package",
    "href": "lecture_6.html#using-usmap-package",
    "title": "6  US states and regions",
    "section": "",
    "text": "This is probably the most continent package to plot a USA. map along with some data. Plot all states of the USA to create an empty map.\n\n\n\nBesides states, we could also plot all counties of the USA.\n\n\n\nusmap also provides many different regions to select\n\n\n\nusmap also provides north regions map\n\n\n\nWe can also select certain states by using state abbreviations",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>US states and regions</span>"
    ]
  },
  {
    "objectID": "lecture_6.html#using-ggplot2-package",
    "href": "lecture_6.html#using-ggplot2-package",
    "title": "6  US states and regions",
    "section": "6.2 Using ggplot2 package",
    "text": "6.2 Using ggplot2 package\n\nusa &lt;- map_data('usa')\n\n\nNext, we use geom_ploygon function to plot USA map.\n\n\nggplot(data=usa, aes(x=long, y=lat, group=group)) + \n  geom_polygon(fill='lightblue') + \n  theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + \n  ggtitle('U.S.A. Map') + \n  coord_fixed(1.3)\n\n\n\n\n\n\n\n\n\nIn order to get more information about USA, now we can add state data to the map. Like above, we obtain data from maps and mapdata packages, and use ggplot2 to plot.\n\n\nstate &lt;- map_data(\"state\")\n\n\nPlot the states with ggplot2\n\n\nggplot(data=state, aes(x=long, y=lat, fill=region, group=group)) + \n  geom_polygon(color = \"white\") + \n  guides(fill=FALSE) + \n  theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank()) + \n  ggtitle('U.S.A. Map with States') + \n  coord_fixed(1.3)\n\n\n\n\n\n\n\n\n\nWhat if we only care about one state? Definitely, we can draw one state map using ggplot2. Firstly we need to filter data.\n\n\nwashington &lt;- subset(state, region==\"washington\")\ncounties &lt;- map_data(\"county\")\nwashington_county &lt;- subset(counties, region==\"washington\")\n\n\nPlot Washington\n\n\nca_map &lt;- ggplot(data=washington, mapping=aes(x=long, y=lat, group=group)) + \n  coord_fixed(1.3) + \n  geom_polygon(color=\"black\", fill=\"gray\") + \n  geom_polygon(data=washington_county, fill=NA, color=\"white\") + \n  geom_polygon(color=\"black\", fill=NA) + \n  ggtitle('Washington Map with Counties') + \n  theme(axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(),\n        axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank())\nca_map",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>US states and regions</span>"
    ]
  },
  {
    "objectID": "lecture_7.html",
    "href": "lecture_7.html",
    "title": "7  Population distribution of Alaska",
    "section": "",
    "text": "Credit: Reproducible Research Techniques for Synthesis: Matt Jones\nThe sf package is an R implementation of Simple Features. This package incorporates:\n\na new spatial data class system in R\nfunctions for reading and writing data\ntools for spatial operations on vectors\n\nMost of the functions in this package starts with prefix st_ which stands for spatial and temporal.\nOur goal is to use a shapefile of Alaska regions and data on population in Alaska by community to create a map.\nLoad necessary packages with pacman package manager\n\npacman::p_load(sf, dplyr, ggplot2, scales, ggmap)\n\n\nPlot the shapefile of Alaska\n\n\n## Read in shapefile using sf\nak_regions &lt;- read_sf(\"data/shapefile/alaska/ak_regions_simp.shp\")\nplot(ak_regions)  \n\n\n\n\n\n\n\n\n\nExamine it’s class.\n\n\nclass(ak_regions)\n\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\nSee the data structure\n\n\nhead(ak_regions)\n\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2296 ymin: 51.15702 xmax: 179.8567 ymax: 71.43957\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 4\n  region_id region           mgmt_area                                  geometry\n      &lt;int&gt; &lt;chr&gt;                &lt;dbl&gt;                        &lt;MULTIPOLYGON [°]&gt;\n1         1 Aleutian Islands         3 (((-171.1345 52.44974, -171.1686 52.4174…\n2         2 Arctic                   4 (((-139.9552 68.70597, -139.9893 68.7051…\n3         3 Bristol Bay              3 (((-159.8745 58.62778, -159.8654 58.6137…\n4         4 Chignik                  3 (((-155.8282 55.84638, -155.8049 55.8655…\n5         5 Copper River             2 (((-143.8874 59.93931, -143.9165 59.9403…\n6         6 Kodiak                   3 (((-151.9997 58.83077, -152.0358 58.8271…\n\n\n\nView what crs is set by using the function st_crs\n\n\nst_crs(ak_regions)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\nThis data has a greographic coordinate system (WGS84) with no projection. Let us use the Alaska Albers projection, with an EPSG code of 3338.\n\n\nak_regions_3338 &lt;- ak_regions %&gt;%\n  st_transform(crs = 3338)\n\nst_crs(ak_regions_3338)\n\nCoordinate Reference System:\n  User input: EPSG:3338 \n  wkt:\nPROJCRS[\"NAD83 / Alaska Albers\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"Alaska Albers (meter)\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Topographic mapping (small scale).\"],\n        AREA[\"United States (USA) - Alaska.\"],\n        BBOX[51.3,172.42,71.4,-129.99]],\n    ID[\"EPSG\",3338]]\n\n\n\nPlot it with Alaska Albers projection\n\n\nplot(ak_regions_3338)\n\n\n\n\n\n\n\n\n\nsummary(ak_regions_3338)\n\n   region_id     region            mgmt_area          geometry \n Min.   : 1   Length:13          Min.   :1   MULTIPOLYGON :13  \n 1st Qu.: 4   Class :character   1st Qu.:2   epsg:3338    : 0  \n Median : 7   Mode  :character   Median :3   +proj=aea ...: 0  \n Mean   : 7                      Mean   :3                     \n 3rd Qu.:10                      3rd Qu.:4                     \n Max.   :13                      Max.   :4                     \n\n\n\nSince sf objects are dataframes, they play nicely with packages in the tidyverse. Here are a couple of simple examples:\n\n\nak_regions_3338 %&gt;%\n  select(region)\n\nSimple feature collection with 13 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -2175328 ymin: 405653 xmax: 1579226 ymax: 2383770\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 13 × 2\n   region                                                               geometry\n   &lt;chr&gt;                                                      &lt;MULTIPOLYGON [m]&gt;\n 1 Aleutian Islands     (((-1156666 420855.1, -1159837 417990.3, -1161898 41694…\n 2 Arctic               (((571289.9 2143072, 569941.5 2142691, 569158.2 2142146…\n 3 Bristol Bay          (((-339688.6 973904.9, -339302 972297.3, -339229.2 9710…\n 4 Chignik              (((-114381.9 649966.8, -112866.8 652065.8, -108836.8 65…\n 5 Copper River         (((561012 1148301, 559393.7 1148169, 557797.7 1148492, …\n 6 Kodiak               (((115112.5 983293, 113051.3 982825.9, 110801.3 983211.…\n 7 Kotzebue             (((-678815.3 1819519, -677555.2 1820698, -675557.8 1821…\n 8 Kuskokwim            (((-1030125 1281198, -1029858 1282333, -1028980 1284032…\n 9 Cook Inlet           (((35214.98 1002457, 36660.3 1002038, 36953.11 1001186,…\n10 Norton Sound         (((-848357 1636692, -846510 1635203, -840513.7 1632225,…\n11 Prince William Sound (((426007.1 1087250, 426562.5 1088591, 427711.6 1089991…\n12 Southeast            (((1287777 744574.1, 1290183 745970.8, 1292940 746262.7…\n13 Yukon                (((-375318 1473998, -373723.9 1473487, -373064.8 147393…\n\n\n\nak_regions_3338 %&gt;%\n  filter(region == \"Southeast\")\n\nSimple feature collection with 1 feature and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 559475.7 ymin: 722450 xmax: 1579226 ymax: 1410576\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 1 × 4\n  region_id region    mgmt_area                                         geometry\n*     &lt;int&gt; &lt;chr&gt;         &lt;dbl&gt;                               &lt;MULTIPOLYGON [m]&gt;\n1        12 Southeast         1 (((1287777 744574.1, 1290183 745970.8, 1292940 …\n\n\n\nHow many people live in each of these Alaska regions? Let us check the data:\n\n\npop &lt;- read.csv(\"data/csv/alaska_population.csv\")\n\n\nAlthough it isn’t said anywhere explicitly in the file, let’s assume that the coordinate system used to reference the latitude longitude coordinates is WGS84, which has a crs number of 4236.\n\n\npop_4326 &lt;- st_as_sf(pop, \n                  coords = c('lng', 'lat'),\n                  crs = 4326,\n                  remove = F)\n\nhead(pop_4326)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -176.6581 ymin: 51.88 xmax: -154.1703 ymax: 62.68889\nGeodetic CRS:  WGS 84\n  year     city      lat       lng population                   geometry\n1 2015     Adak 51.88000 -176.6581        122    POINT (-176.6581 51.88)\n2 2015   Akhiok 56.94556 -154.1703         84 POINT (-154.1703 56.94556)\n3 2015 Akiachak 60.90944 -161.4314        562 POINT (-161.4314 60.90944)\n4 2015    Akiak 60.91222 -161.2139        399 POINT (-161.2139 60.91222)\n5 2015   Akutan 54.13556 -165.7731        899 POINT (-165.7731 54.13556)\n6 2015 Alakanuk 62.68889 -164.6153        777 POINT (-164.6153 62.68889)\n\n\n\npop_joined &lt;- st_join(pop_4326, ak_regions_3338, join = st_within)\n\n\nThis gives an error!\n\n\npop_3338 &lt;- st_transform(pop_4326, crs = 3338)\n\n\nTurns out, this won’t work right now because our coordinate reference systems are not the same. Luckily, this is easily resolved using st_transform, and projecting our population object into Alaska Albers.\n\n\npop_joined &lt;- st_join(pop_3338, ak_regions_3338, join = st_within)\n\nhead(pop_joined)\n\nSimple feature collection with 6 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -1537925 ymin: 472626.9 xmax: -10340.71 ymax: 1456223\nProjected CRS: NAD83 / Alaska Albers\n  year     city      lat       lng population region_id           region\n1 2015     Adak 51.88000 -176.6581        122         1 Aleutian Islands\n2 2015   Akhiok 56.94556 -154.1703         84         6           Kodiak\n3 2015 Akiachak 60.90944 -161.4314        562         8        Kuskokwim\n4 2015    Akiak 60.91222 -161.2139        399         8        Kuskokwim\n5 2015   Akutan 54.13556 -165.7731        899         1 Aleutian Islands\n6 2015 Alakanuk 62.68889 -164.6153        777        13            Yukon\n  mgmt_area                   geometry\n1         3  POINT (-1537925 472626.9)\n2         3 POINT (-10340.71 770998.4)\n3         4  POINT (-400885.5 1236460)\n4         4  POINT (-389165.7 1235475)\n5         3 POINT (-766425.7 526057.8)\n6         4  POINT (-539724.9 1456223)\n\n\n\npop_region &lt;- pop_joined %&gt;% \n  as.data.frame() %&gt;% \n  group_by(region) %&gt;% \n  summarise(total_pop = sum(population))\n\nhead(pop_region)\n\n# A tibble: 6 × 2\n  region           total_pop\n  &lt;chr&gt;                &lt;int&gt;\n1 Aleutian Islands      8840\n2 Arctic                8419\n3 Bristol Bay           6947\n4 Chignik                311\n5 Cook Inlet          408254\n6 Copper River          2294\n\n\n\nAnd use a regular left_join to get the information back to the Alaska region shapefile.\n\n\npop_region_3338 &lt;- left_join(ak_regions_3338, pop_region)\n\nJoining with `by = join_by(region)`\n\n\n\nPlot to check\n\n\n#plot to check\nplot(pop_region_3338[\"total_pop\"])\n\n\n\n\n\n\n\n\n\nSay we want to calculate the population by Alaska management area, as opposed to region.\n\n\npop_mgmt_338 &lt;- pop_region_3338 %&gt;% \n  group_by(mgmt_area) %&gt;% \n  summarize(total_pop = sum(total_pop))\n\nplot(pop_mgmt_338[\"total_pop\"])\n\n\n\n\n\n\n\n\n\nNotice that the region geometries were combined into a single polygon for each management area. If we don’t want to combine geometries, we can specifcy do_union = F as an argument.\n\n\npop_mgmt_3338 &lt;- pop_region_3338 %&gt;% \n  group_by(mgmt_area) %&gt;% \n  summarize(total_pop = sum(total_pop), do_union = F)\n\nplot(pop_mgmt_3338[\"total_pop\"])\n\n\n\n\n\n\n\n\n\nwrite_sf(pop_region_3338, \"shapefiles/ak_regions_population.shp\", delete_layer = TRUE)\n\n\nVisualize with ggplot. It now has integrated functionality to plot sf objects using geom_sf(). We can plot sf objects just like regular data.frames using geom_sf.\n\n\nggplot(pop_region_3338) +\n  geom_sf(aes(fill = total_pop)) +\n  theme_bw() +\n  labs(fill = \"Total Population\") +\n  scale_fill_continuous(low = \"khaki\", high =  \"firebrick\", labels = comma)\n\n\n\n\n\n\n\n\n\nThe rivers shapefile is a simplified version of Jared Kibele and Jeanette Clark.\n\n\nrivers_3338 &lt;- read_sf(\"data/shapefile/alaska/ak_rivers_simp.shp\")\nst_crs(rivers_3338)\n\nCoordinate Reference System:\n  User input: Albers \n  wkt:\nPROJCRS[\"Albers\",\n    BASEGEOGCRS[\"GCS_GRS 1980(IUGG, 1980)\",\n        DATUM[\"unknown\",\n            ELLIPSOID[\"GRS80\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\nNote that although no EPSG code is set explicitly, with some sluething we can determine that this is EPSG:3338. This site is helpful for looking up EPSG codes.\n\n\nggplot() +\n  geom_sf(data = pop_region_3338, aes(fill = total_pop)) +\n  geom_sf(data = rivers_3338, aes(size = StrOrder), color = \"black\") +\n  geom_sf(data = pop_3338, aes(), size = .5) +\n  scale_size(range = c(0.01, 0.2), guide = F) +\n  theme_bw() +\n  labs(fill = \"Total Population\") +\n  scale_fill_continuous(low = \"khaki\", high =  \"firebrick\", labels = comma)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Population distribution of Alaska</span>"
    ]
  },
  {
    "objectID": "lecture_8.html",
    "href": "lecture_8.html",
    "title": "8  US cities and walmart locations",
    "section": "",
    "text": "Spatial data are best analyzed by visualization through maps. This chapter covers two types of spatial data. One is spatial point data, which can be plotted as a set of points on a map. The other is spatial polygon data, which represent a sequence of connected points on a map corresponding to the boundaries of certain areas such as counties, districts, and provinces. We also consider spatial–temporal data, which are a set of spatial point or polygon data recorded over time, revealing changes in spatial patterns over time.\nFirst we can load necessary packages by using pacman.\n\npacman::p_load(maps, animation, DT)\n\nIn R, the maps package provides various mapping tools as well as many spatial databases. The package contains a spatial database of various cities in the world. For example, it includes a data frame of US cities called us.cities. Any built-in data frame can be loaded by using the data() function. Below, we show the first few observations of this data set, which contains the name (as the name variable), state (country.etc), population (pop), latitude (lat), longitude (long), and whether the city is the capital of the country (capital = 1), the capital of a state (capital = 2), or neither (capital = 0).\n\ndata(\"us.cities\")\nhead(us.cities)\n\n        name country.etc    pop   lat    long capital\n1 Abilene TX          TX 113888 32.45  -99.74       0\n2   Akron OH          OH 206634 41.08  -81.52       0\n3 Alameda CA          CA  70069 37.77 -122.26       0\n4  Albany GA          GA  75510 31.58  -84.18       0\n5  Albany NY          NY  93576 42.67  -73.80       2\n6  Albany OR          OR  45535 44.62 -123.09       0\n\n\nNow we can add state capitals to the map of the United States. We can use the map() function to access one spatial database and visualize the data therein. For example, in order to plot the United States, we set the database argument to “usa”. Spatial points can be easily added to maps using the points() function with their longitude and latitude information as the inputs for the x and y coordinates, respectively. Each state capital is represented by a solid circle whose size is proportional to its population. We can add a title by using the title() function after a map is drawn.\n\nmap(database = \"usa\")\ncapitals &lt;- subset(us.cities, capital == 2) # subset state capitals\n## add points proportional to population using latitude and longitude\npoints(x = capitals$long, y = capitals$lat, col = \"blue\",\ncex = capitals$pop / 500000, pch = 19)\ntitle(\"US state capitals\") # add a title\n\n\n\n\n\n\n\n\nAs another example, we plot the state of California. We use the “state” database, which contains the spatial polygon data about US states, and specify the regions argument to “California”.\n\nmap(database = \"state\", regions = \"California\")\n\n\n\n\n\n\n\n\nWe will add to a map of California the seven cities that have the largest populations. To extract these cities from the data, we use the order() function\n\ncal.cities &lt;- subset(us.cities, subset = (country.etc == \"CA\"))\nsind &lt;- order(cal.cities$pop, decreasing = TRUE)# order by population\ntop7 &lt;- sind[1:7] # seven cities with largest population\n\nWe now add these cities to the map using the points() function, as well as their city names using the text() function.\n\nmap(database = \"state\", regions = \"California\")\npoints(x = cal.cities$long[top7], y = cal.cities$lat[top7], pch = 19)\n## add a constant to longitude to avoid overlapping with circles\ntext(x = cal.cities$long[top7] + 2.25, y = cal.cities$lat[top7],\n     label = cal.cities$name[top7])\ntitle(\"Largest cities of California\")\n\n\n\n\n\n\n\n\n\nusa &lt;- map(database = \"usa\", plot = FALSE) # save map\nnames(usa)  # list elements\n\n[1] \"x\"     \"y\"     \"range\" \"names\"\n\n\n\nlength(usa$x)\n\n[1] 7252\n\n\nWe observe that the map of the United States consists of 7252 pairs of coordinates. The map() function connects these points to construct maps.\nSpatial data contain information about patterns over space and can be visualized through maps. While spatial point data represent the locations of events as points on a map, spatial polygon data represent geographical areas by connecting points on a map.\n\nhead(cbind(usa$x, usa$y)) # first five coordinates of a polygon\n\n          [,1]     [,2]\n[1,] -101.4078 29.74224\n[2,] -101.3906 29.74224\n[3,] -101.3620 29.65056\n[4,] -101.3505 29.63911\n[5,] -101.3219 29.63338\n[6,] -101.3047 29.64484\n\n\n\n8.0.1 COLORS IN R\nWe next learn how to color maps. Color is important for visualization in general, not simply for maps. So far, we have been specifying colors using names like “red” or “blue”. In fact, R knows the names of 657 different colors. To see them all, look at the output of the colors() function.\n\nallcolors &lt;- colors()\nhead(allcolors) # some colors\n\n[1] \"white\"         \"aliceblue\"     \"antiquewhite\"  \"antiquewhite1\"\n[5] \"antiquewhite2\" \"antiquewhite3\"\n\n\n\nlength(allcolors) # number of color names\n\n[1] 657\n\n\nIn R, the rgb() function helps create hexadecimal color codes from numerical values. The three arguments, red, green, and blue, take the intensity of each color, ranging from 0 to 1, which gets translated into an integer value from 0 to 255 and then represented as a hexadecimal numeral. In addition, we can create more than one color code from rgb() at a time. The arguments can take vectors of length longer than 1. Below are some examples of hexadecimal color code.\n\nred &lt;- rgb(red = 1, green = 0, blue = 0) # red\ngreen &lt;- rgb(red = 0, green = 1, blue = 0) # green\nblue &lt;- rgb(red = 0, green = 0, blue = 1) # blue\nc(red, green, blue) # results\n\n[1] \"#FF0000\" \"#00FF00\" \"#0000FF\"\n\n\nBlack and white can be represented by 0% or 100% for each primary color, respectively.\n\nblack &lt;- rgb(red = 0, green = 0, blue = 0) # black\nwhite &lt;- rgb(red = 1, green = 1, blue = 1) # white\nc(black, white) # results\n\n[1] \"#000000\" \"#FFFFFF\"\n\n\nFinally, we can create purple (50% red and 50% blue) and yellow (100% red and 100% green). The rgb() function can take a vector of inputs, as illustrated in this example.\n\nrgb(red = c(0.5, 1), green = c(0, 1), blue = c(0.5, 0))\n\n[1] \"#800080\" \"#FFFF00\"\n\n\nAnother advantage of using hexadecimal color codes is that we can make the colors (partly) transparent by adding two additional digits, from 00 to FF, to the end of a hexadecimal color code. This enables us to control the level of transparency. Again, it is easier to think about the intensity scale from 0 to 1 and use the rgb() function to transform it to a hexadecimal color code. The function takes a fourth argument alpha, which can be used for this purpose. An example is given here.\n\n## semitransparent blue\nblue.trans &lt;- rgb(red = 0, green = 0, blue = 1, alpha = 0.5)\n## semitransparent black\nblack.trans &lt;- rgb(red = 0, green = 0, blue = 0, alpha = 0.5)\n\nOnce we know the hexadecimal colors, we can use them (as a character object) in our plots in the same way that we have been using named colors like “red” and “blue”. In the following plot, semitransparent circles can be easily distinguished even when they overlap, whereas it is harder to distinguish between nontransparent circles.\n\n## completely colored dots; difficult to distinguish\nplot(x = c(1, 1), y = c(1, 1.2), xlim = c(0.5, 4.5), ylim = c(0.5, 4.5),\n     pch = 16, cex = 5, ann = FALSE, col = black)\npoints(x = c(3, 3), y = c(3, 3.2), pch = 16, cex = 5, col = blue)\n## semitransparent; easy to distinguish\npoints(x = c(2, 2), y = c(2, 2.2), pch = 16, cex = 5, col = black.trans)\npoints(x = c(4, 4), y = c(4, 4.2), pch = 16, cex = 5, col = blue.trans)\n\n\n\n\n\n\n\n\n\n\n8.0.2 US PRESIDENTIAL ELECTIONS\nHere, we color the map of the United States using the 2008 presidential election results. We will color each state in two ways. First, we use blue for the states won by Obama and red for the states won by McCain. The following code chunk loads the data set, computes the two-party vote shares, and sets the RGB color scheme for California based on its two-party vote share.\n\npres08 &lt;- read.csv(\"data/csv/pres08.csv\")\n## two-party vote share\npres08$Dem &lt;- pres08$Obama / (pres08$Obama + pres08$McCain)\npres08$Rep &lt;- pres08$McCain / (pres08$Obama + pres08$McCain)\n## color for California\ncal.color &lt;- rgb(red = pres08$Rep[pres08$state == \"CA\"],\n                 blue = pres08$Dem[pres08$state == \"CA\"],\n                 green = 0)\n\nThe DT package (an interface to the DataTables JavaScript library) can display R matrices or data frames as interactive HTML tables that support filtering, pagination, and sorting.\n\nlibrary(DT)\ndatatable(pres08)\n\n\n\n\n\nWe now color the map of California in two ways. First, we color it as a blue state because Obama won California in 2008. Second, we color it using the RGB color scheme based on the two-party vote share.\n\n## California as a blue state\nmap(database = \"state\", regions = \"California\", col = \"blue\",\n    fill = TRUE)\n\n\n\n\n\n\n\n\n\n## California as a purple state\nmap(database = \"state\", regions = \"California\", col = cal.color,\nfill = TRUE)\n\n\n\n\n\n\n\n\nWe will repeat this for all states using a loop. The map does not include Hawaii, Alaska, and Washington DC, so we will skip those states. Note that we will set the add argument to TRUE in order to add a color to each state. A loop is used because we color one state at a time.\n\nWe first use a dichotomized color scheme where the states Obama won appear blue and those won by McCain are shown as red.\n\n\n## USA as red and blue states\nmap(database = \"state\") # create a map\nfor (i in 1:nrow(pres08)) {\n    if ((pres08$state[i] != \"HI\") & (pres08$state[i] != \"AK\") &\n        (pres08$state[i] != \"DC\")) {\n        map(database = \"state\", regions = pres08$state.name[i],\n          col = ifelse(pres08$Rep[i] &gt; pres08$Dem[i], \"red\", \"blue\"),\n            fill = TRUE, add = TRUE)\n} }\n\n\n\n\n\n\n\n\n\nIn the second map, we use the RGB color scheme based on the two-party vote share for each state. The code chunks used for these two maps are almost identical. The only difference is the way in which color is chosen for each state.\n\n\n## USA as purple states\nmap(database = \"state\") # create a map\nfor (i in 1:nrow(pres08)) {\n    if ((pres08$state[i] != \"HI\") & (pres08$state[i] != \"AK\") &\n        (pres08$state[i] != \"DC\")) {\n        map(database = \"state\", regions = pres08$state.name[i],\n            col = rgb(red = pres08$Rep[i], blue = pres08$Dem[i],\n                green = 0), fill = TRUE, add = TRUE)\n} }\n\n\n\n\n\n\n\n\n\nThe first map shows that Obama won many states on the West and East Coasts whereas McCain was particularly strong in the Midwest.\nHowever, the second map illustrates that no state is completely dominated by either Democrats or Republicans. Each state has both types of voters, and it is the winner-take-all electoral system that is responsible for characterizing each state as either a blue or a red state.\n\n\n\n8.0.3 EXPANSION OF WALMART\nWalmart has become one of the largest retail multinational companies in the world. Table shows the names and descriptions of variables in the Walmart store opening data, walmart.csv.\n\nwalmart &lt;- read.csv(\"data/csv/walmart.csv\")\n## red = Wal-MartStore, green = SuperCenter, blue = DistributionCenter\nwalmart$storecolors &lt;- NA # create an empty vector\nwalmart$storecolors[walmart$type == \"Wal-MartStore\"] &lt;-\n    rgb(red = 1, green = 0, blue = 0, alpha = 1/3)\n\nThe DT package (an interface to the DataTables JavaScript library) can display R matrices or data frames as interactive HTML tables that support filtering, pagination, and sorting.\n\nlibrary(DT)\ndatatable(walmart)\n\n\n\n\n\nThe data set contains three different types of stores, represented by the variable type. Wal-MartStore represents a standard Walmart store, whereas SuperCenter is a standard Walmart store as well as a full supermarket. Walmart Supercenters often include pharma- cies, garden shops, car service centers, and other specialty centers. We also plot DistributionCenter data, representing stores that distribute food and goods to standard Walmart stores and Supercenters.\n\nwalmart$storecolors[walmart$type == \"SuperCenter\"] &lt;-\n    rgb(red = 0, green = 1, blue = 0, alpha = 1/3)\nwalmart$storecolors[walmart$type == \"DistributionCenter\"] &lt;-\n    rgb(red = 0, green = 0, blue = 1, alpha = 1/3)\n## larger circles for DistributionCenter\nwalmart$storesize &lt;- ifelse(walmart$type == \"DistributionCenter\", 1, 0.5)\n\nFinally, we create a map and add Walmart store locations to it. We also include a legend using the legend() function. To use this function, we specify the location of the legend by setting the x and y coordinates and provide a vector of legend texts as the legend argument.\n\n## map with legend\nmap(database = \"state\")\npoints(walmart$long, walmart$lat, col = walmart$storecolors,\n       pch = 19, cex = walmart$storesize)\nlegend(x = -120, y = 32, bty = \"n\",\n       legend = c(\"Walmart\", \"Supercenter\", \"Distribution center\"),\n       col = c(\"red\", \"green\", \"blue\"), pch = 19, # solid circles\n       pt.cex = c(0.5, 0.5, 1)) # size of circles\n\n\n\n\n\n\n\n\n\nwalmart.map &lt;- function(data, date) {\n    walmart &lt;- subset(data, subset = (opendate &lt;= date))\n    map(database = \"state\")\n    points(walmart$long, walmart$lat, col = walmart$storecolors,\npch = 19, cex = walmart$storesize)\n}\n\n\nwalmart$opendate &lt;- as.Date(walmart$opendate)\nwalmart.map(walmart, as.Date(\"1974-12-31\"))\ntitle(\"1975\")\n\n\n\n\n\n\n\n\n\nwalmart.map(walmart, as.Date(\"1984-12-31\"))\ntitle(\"1985\")\n\n\n\n\n\n\n\n\n\nwalmart.map(walmart, as.Date(\"1994-12-31\"))\ntitle(\"1995\")\n\n\n\n\n\n\n\n\n\nwalmart.map(walmart, as.Date(\"2004-12-31\"))\ntitle(\"2005\")\n\n\n\n\n\n\n\n\n\nn &lt;- 25 # number of maps to animate\ndates &lt;- seq(from = min(walmart$opendate),\n             to = max(walmart$opendate), length.out = n)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>US cities and walmart locations</span>"
    ]
  },
  {
    "objectID": "lecture_9.html",
    "href": "lecture_9.html",
    "title": "9  Population density of Bangladesh",
    "section": "",
    "text": "Load all necessary packages\n\n\nlibrary(tidyverse)\nlibrary(sf)\n\n\nAlternatively load all necessary packages by using pacman package manager\n\n\npacman::p_load(tidyverse, stringr, sf, RColorBrewer, leaflet, ggplot2, ggthemes, patchwork, plotly, ggrepel)\n\nLoad the shapefile of Bangladesh admin level 1 which represents the divisions.\n\nbd1_shp &lt;- st_read(\"data/shapefile/bd_adm1_shp/bgd_admbnda_adm1_bbs_20201113.shp\")\nbd2_shp &lt;- st_read(\"data/shapefile/bd_adm2_shp/bgd_admbnda_adm2_bbs_20201113.shp\")\nbd3_shp &lt;- st_read(\"data/shapefile/bd_adm3_shp/bgd_admbnda_adm3_bbs_20201113.shp\")\n\n\nObserve the data inside the shape file\n\n\nbd1_shp\n\n\nbd2_shp\n\n\nbd3_shp\n\n\nCheck the geographic coordinate system of your shapefile\n\n\nst_crs(bd1_shp)\n\n\nst_crs(bd2_shp)\n\n\nst_crs(bd3_shp)\n\n\nPlot the map and show the name of the divisions\n\n\nggplot(bd1_shp) +\n  geom_sf() + \n  geom_sf_text(aes(label = ADM1_EN), size = 2) \n\n\n\n\n\n\n\n\n\nggplot(bd2_shp) +\n  geom_sf() \n\n\n\n\n\n\n\n\n\nggplot(bd3_shp) +\n  geom_sf() \n\n\n\n\n\n\n\n\n\nPrepare a custom theme to make the visualization of this map better than previous default version\n\n\ntheme_custom_map &lt;- function(base_size = 11,\n                             base_family = \"\",\n                             base_line_size = base_size / 22,\n                             base_rect_size = base_size / 22) {\n    theme_bw(base_size = base_size, \n             base_family = base_family,\n             base_line_size = base_line_size) %+replace%\n        theme(\n            axis.title = element_blank(), \n            axis.text = element_blank(),\n            axis.ticks = element_blank(),\n            complete = TRUE\n        )\n}\n\n\nggplot(bd1_shp) +\n  geom_sf() +\n  geom_sf_text(aes(label = ADM1_EN), size = 2) +\n  theme_custom_map()\n\n\n\n\n\n\n\n\n\nggplot(bd2_shp) +\n  geom_sf() +\n   theme_custom_map()\n\n\n\n\n\n\n\n\n\nggplot(bd3_shp) +\n  geom_sf() +\n   theme_custom_map()\n\n\n\n\n\n\n\n\n\nImport population data of all divisions of Bangladesh\n\n\nbd1_pop &lt;- read.csv(\"data/csv/bd_pop_adm1_2022.csv\")\nbd2_pop &lt;- read.csv(\"data/csv/bd_pop_adm2_2022.csv\")\nbd3_pop &lt;- read.csv(\"data/csv/bd_pop_adm3_2022.csv\")\n\n\nMerge the shapefile and csv data-set\n\n\nbd1_shp_pop &lt;- merge(bd1_shp, bd1_pop, by=c(\"ADM1_PCODE\"))\nbd1_shp_pop &lt;- st_make_valid(bd1_shp_pop)\nglimpse(bd1_shp_pop)\n\n\nbd2_shp_pop &lt;- merge(bd2_shp, bd2_pop, by=c(\"ADM2_PCODE\"))\nbd2_shp_pop &lt;- st_make_valid(bd2_shp_pop)\nglimpse(bd2_shp_pop)\n\n\nbd3_shp_pop &lt;- merge(bd3_shp, bd3_pop, by=c(\"ADM3_PCODE\"))\nbd3_shp_pop &lt;- st_make_valid(bd3_shp_pop)\nglimpse(bd3_shp_pop)\n\n\nDraw the map ADM1\n\n\nggplot(bd1_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    geom_sf_text(aes(label = ADM1_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\")\n\n\n\n\n\n\n\n\n\nBy loading additional package, we can draw for informative maps\n\n\nggplot(bd1_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    geom_sf_text(aes(label = ADM1_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\") +\n    theme_map() + \n    theme(legend.direction=\"horizontal\") +\n     labs(title = \"Divisions of Bangladesh\", \n         subtitle = \"Population density of Bangladesh\", \n         caption = \"Source of data: BBS\")\n\n\nDraw the map ADM2\n\n\nggplot(bd2_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    #geom_sf_text(aes(label = ADM2_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\")\n\n\n\n\n\n\n\n\n\nBy loading additional package, we can draw for informative maps\n\n\nggplot(bd2_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    #geom_sf_text(aes(label = ADM2_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\") +\n    theme_map() + \n    theme(legend.direction=\"horizontal\") +\n     labs(title = \"Districts of Bangladesh\", \n         subtitle = \"Population density of Bangladesh\", \n         caption = \"Source of data: BBS\")\n\n\nDraw the map ADM3\n\n\nggplot(bd3_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    #geom_sf_text(aes(label = ADM2_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\")\n\n\n\n\n\n\n\n\n\nBy loading additional package, we can draw for informative maps\n\n\nggplot(bd3_shp_pop) +\n    geom_sf(aes(fill=F_TL), color = \"white\", lwd = 0.07) +\n    #geom_sf_text(aes(label = ADM2_EN), size = 2) +\n    scale_fill_viridis_c(option = \"magma\", name = \"Population\") +\n    theme_map() + \n    theme(legend.direction=\"horizontal\") +\n     labs(title = \"Upazila/Thana of Bangladesh\", \n         subtitle = \"Population density of Bangladesh\", \n         caption = \"Source of data: BBS\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Population density of Bangladesh</span>"
    ]
  },
  {
    "objectID": "lecture_10.html",
    "href": "lecture_10.html",
    "title": "10  Administrative regions of Japan",
    "section": "",
    "text": "Load all necessary packages\n\n\nlibrary(tidyverse)\nlibrary(sf)\n\n\nLoad the shapefile of Japan’s administrative divisions\n\n\njp0_shp &lt;- st_read(\"data/shapefile/jp_adm0_shp/jpn_admbnda_adm0_2019.shp\")\njp1_shp &lt;- st_read(\"data/shapefile/jp_adm1_shp/jpn_admbnda_adm1_2019.shp\") \njp2_shp &lt;- st_read(\"data/shapefile/jp_adm2_shp/jpn_admbnda_adm2_2019.shp\") \n\n\nObserve the data inside the shape file of adm0\n\n\njp0_shp # for admin level 0\njp1_shp # for admin level 1\njp2_shp # for admin level 2\n\n\nCheck the geographic coordinate system of your adm0 shapefile\n\n\nst_crs(jp0_shp) # for admin level 0\nst_crs(jp1_shp) # for admin level 1\nst_crs(jp2_shp) # for admin level 2\n\n\nPlot the map of Japan admin 0\n\n\nggplot(jp0_shp) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nChange the boundary color and fill it with white color.\n\n\nggplot(jp0_shp) +\n    geom_sf(color = \"blue\", fill = \"white\", lwd = 0.07)\n\n\n\n\n\n\n\n\n\nWe can try the aes() function to improve the visual of the ADM0. Aesthetics are used to bind plotting parameters to your data. The aes() function defines which variables you want to plot, and which plot parameters to map them to.\n\n\nggplot(jp0_shp) +\n    geom_sf(aes(fill = ADM0_PCODE),  show.legend = FALSE)\n\n\n\n\n\n\n\n\n\nPlot the map of Japan admin 1\n\n\nggplot(jp1_shp) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nLets change the color of boundary and fill.\n\n\nggplot(jp1_shp) +\n    geom_sf(color = \"blue\",  fill = \"white\", lwd = 0.07)\n\n\n\n\n\n\n\n\n\nWe can try the aes() function to improve the visual of the ADM1.\n\n\nggplot(jp1_shp) +\n    geom_sf(aes(fill = ADM1_PCODE),  show.legend = FALSE)\n\n\n\n\n\n\n\n\n\nPlot the map of Japan admin 2\n\n\nggplot(jp2_shp) +\n  geom_sf()\n\n\n\n\n\n\n\n\n\nLets change the color of boundary and fill\n\n\nggplot(jp2_shp) +\n    geom_sf(color = \"blue\",  fill = \"white\", lwd = 0.07)\n\n\n\n\n\n\n\n\n\n\nWe can try the aes() function to improve the visual of the ADM2.\n\n\n\nggplot(jp2_shp) +\n    geom_sf(aes(fill = ADM2_PCODE),  show.legend = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Administrative regions of Japan</span>"
    ]
  },
  {
    "objectID": "lecture_11.html",
    "href": "lecture_11.html",
    "title": "11  Europian regions with naturalearth data",
    "section": "",
    "text": "library(tidyverse)\nlibrary(sf)\nlibrary(knitr)\n\n\nnaturalearthdata.com provides many open-source maps. I decided to select the world map with country borders on a 1:10m scale (can be found https://www.naturalearthdata.com/downloads/10m-cultural-vectors/)\n\n\nmap_data &lt;- st_read(\"data/shapefile/ne_10m_admin_0_countries\")\n\n\nThe map_data uses data.frames for its features and saves the geometric features as a list in the column geometry. We can now easily explore the data in map_data, e.g.,The map_data uses data.frames for its features and saves the geometric features as a list in the column geometry. We can now easily explore the data in map_data, e.g.,\n\n\nfeatures_map_data &lt;- map_data %&gt;%\n    as_tibble() %&gt;%\n    select(-geometry) %&gt;%\n    head(10)\n\nkable(features_map_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfeaturecla\nscalerank\nLABELRANK\nSOVEREIGNT\nSOV_A3\nADM0_DIF\nLEVEL\nTYPE\nTLC\nADMIN\nADM0_A3\nGEOU_DIF\nGEOUNIT\nGU_A3\nSU_DIF\nSUBUNIT\nSU_A3\nBRK_DIFF\nNAME\nNAME_LONG\nBRK_A3\nBRK_NAME\nBRK_GROUP\nABBREV\nPOSTAL\nFORMAL_EN\nFORMAL_FR\nNAME_CIAWF\nNOTE_ADM0\nNOTE_BRK\nNAME_SORT\nNAME_ALT\nMAPCOLOR7\nMAPCOLOR8\nMAPCOLOR9\nMAPCOLOR13\nPOP_EST\nPOP_RANK\nPOP_YEAR\nGDP_MD\nGDP_YEAR\nECONOMY\nINCOME_GRP\nFIPS_10\nISO_A2\nISO_A2_EH\nISO_A3\nISO_A3_EH\nISO_N3\nISO_N3_EH\nUN_A3\nWB_A2\nWB_A3\nWOE_ID\nWOE_ID_EH\nWOE_NOTE\nADM0_ISO\nADM0_DIFF\nADM0_TLC\nADM0_A3_US\nADM0_A3_FR\nADM0_A3_RU\nADM0_A3_ES\nADM0_A3_CN\nADM0_A3_TW\nADM0_A3_IN\nADM0_A3_NP\nADM0_A3_PK\nADM0_A3_DE\nADM0_A3_GB\nADM0_A3_BR\nADM0_A3_IL\nADM0_A3_PS\nADM0_A3_SA\nADM0_A3_EG\nADM0_A3_MA\nADM0_A3_PT\nADM0_A3_AR\nADM0_A3_JP\nADM0_A3_KO\nADM0_A3_VN\nADM0_A3_TR\nADM0_A3_ID\nADM0_A3_PL\nADM0_A3_GR\nADM0_A3_IT\nADM0_A3_NL\nADM0_A3_SE\nADM0_A3_BD\nADM0_A3_UA\nADM0_A3_UN\nADM0_A3_WB\nCONTINENT\nREGION_UN\nSUBREGION\nREGION_WB\nNAME_LEN\nLONG_LEN\nABBREV_LEN\nTINY\nHOMEPART\nMIN_ZOOM\nMIN_LABEL\nMAX_LABEL\nLABEL_X\nLABEL_Y\nNE_ID\nWIKIDATAID\nNAME_AR\nNAME_BN\nNAME_DE\nNAME_EN\nNAME_ES\nNAME_FA\nNAME_FR\nNAME_EL\nNAME_HE\nNAME_HI\nNAME_HU\nNAME_ID\nNAME_IT\nNAME_JA\nNAME_KO\nNAME_NL\nNAME_PL\nNAME_PT\nNAME_RU\nNAME_SV\nNAME_TR\nNAME_UK\nNAME_UR\nNAME_VI\nNAME_ZH\nNAME_ZHT\nFCLASS_ISO\nTLC_DIFF\nFCLASS_TLC\nFCLASS_US\nFCLASS_FR\nFCLASS_RU\nFCLASS_ES\nFCLASS_CN\nFCLASS_TW\nFCLASS_IN\nFCLASS_NP\nFCLASS_PK\nFCLASS_DE\nFCLASS_GB\nFCLASS_BR\nFCLASS_IL\nFCLASS_PS\nFCLASS_SA\nFCLASS_EG\nFCLASS_MA\nFCLASS_PT\nFCLASS_AR\nFCLASS_JP\nFCLASS_KO\nFCLASS_VN\nFCLASS_TR\nFCLASS_ID\nFCLASS_PL\nFCLASS_GR\nFCLASS_IT\nFCLASS_NL\nFCLASS_SE\nFCLASS_BD\nFCLASS_UA\n\n\n\n\nAdmin-0 country\n0\n2\nIndonesia\nIDN\n0\n2\nSovereign country\n1\nIndonesia\nIDN\n0\nIndonesia\nIDN\n0\nIndonesia\nIDN\n0\nIndonesia\nIndonesia\nIDN\nIndonesia\nNA\nIndo.\nINDO\nRepublic of Indonesia\nNA\nIndonesia\nNA\nNA\nIndonesia\nNA\n6\n6\n6\n11\n270625568\n17\n2019\n1119190\n2019\n4. Emerging region: MIKT\n4. Lower middle income\nID\nID\nID\nIDN\nIDN\n360\n360\n360\nID\nIDN\n23424846\n23424846\nExact WOE match as country\nIDN\nNA\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\nIDN\n-99\n-99\nAsia\nAsia\nSouth-Eastern Asia\nEast Asia & Pacific\n9\n9\n5\n-99\n1\n0\n1.7\n6.7\n101.89295\n-0.954404\n1159320845\nQ252\nإندونيسيا\nইন্দোনেশিয়া\nIndonesien\nIndonesia\nIndonesia\nاندونزی\nIndonésie\nΙνδονησία\nאינדונזיה\nइंडोनेशिया\nIndonézia\nIndonesia\nIndonesia\nインドネシア\n인도네시아\nIndonesië\nIndonezja\nIndonésia\nИндонезия\nIndonesien\nEndonezya\nІндонезія\nانڈونیشیا\nIndonesia\n印度尼西亚\n印度尼西亞\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n3\nMalaysia\nMYS\n0\n2\nSovereign country\n1\nMalaysia\nMYS\n0\nMalaysia\nMYS\n0\nMalaysia\nMYS\n0\nMalaysia\nMalaysia\nMYS\nMalaysia\nNA\nMalay.\nMY\nMalaysia\nNA\nMalaysia\nNA\nNA\nMalaysia\nNA\n2\n4\n3\n6\n31949777\n15\n2019\n364681\n2019\n6. Developing region\n3. Upper middle income\nMY\nMY\nMY\nMYS\nMYS\n458\n458\n458\nMY\nMYS\n23424901\n23424901\nExact WOE match as country\nMYS\nNA\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\nMYS\n-99\n-99\nAsia\nAsia\nSouth-Eastern Asia\nEast Asia & Pacific\n8\n8\n6\n-99\n1\n0\n3.0\n8.0\n113.83708\n2.528667\n1159321083\nQ833\nماليزيا\nমালয়েশিয়া\nMalaysia\nMalaysia\nMalasia\nمالزی\nMalaisie\nΜαλαισία\nמלזיה\nमलेशिया\nMalajzia\nMalaysia\nMalaysia\nマレーシア\n말레이시아\nMaleisië\nMalezja\nMalásia\nМалайзия\nMalaysia\nMalezya\nМалайзія\nملائیشیا\nMalaysia\n马来西亚\n馬來西亞\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n2\nChile\nCHL\n0\n2\nSovereign country\n1\nChile\nCHL\n0\nChile\nCHL\n0\nChile\nCHL\n0\nChile\nChile\nCHL\nChile\nNA\nChile\nCL\nRepublic of Chile\nNA\nChile\nNA\nNA\nChile\nNA\n5\n1\n5\n9\n18952038\n14\n2019\n282318\n2019\n5. Emerging region: G20\n3. Upper middle income\nCI\nCL\nCL\nCHL\nCHL\n152\n152\n152\nCL\nCHL\n23424782\n23424782\nExact WOE match as country\nCHL\nNA\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\nCHL\n-99\n-99\nSouth America\nAmericas\nSouth America\nLatin America & Caribbean\n5\n5\n5\n-99\n1\n0\n1.7\n6.7\n-72.31887\n-38.151771\n1159320493\nQ298\nتشيلي\nচিলি\nChile\nChile\nChile\nشیلی\nChili\nΧιλή\nצ’ילה\nचिली\nChile\nChili\nCile\nチリ\n칠레\nChili\nChile\nChile\nЧили\nChile\nŞili\nЧилі\nچلی\nChile\n智利\n智利\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n3\nBolivia\nBOL\n0\n2\nSovereign country\n1\nBolivia\nBOL\n0\nBolivia\nBOL\n0\nBolivia\nBOL\n0\nBolivia\nBolivia\nBOL\nBolivia\nNA\nBolivia\nBO\nPlurinational State of Bolivia\nNA\nBolivia\nNA\nNA\nBolivia\nNA\n1\n5\n2\n3\n11513100\n14\n2019\n40895\n2019\n5. Emerging region: G20\n4. Lower middle income\nBL\nBO\nBO\nBOL\nBOL\n068\n068\n068\nBO\nBOL\n23424762\n23424762\nExact WOE match as country\nBOL\nNA\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\nBOL\n-99\n-99\nSouth America\nAmericas\nSouth America\nLatin America & Caribbean\n7\n7\n7\n-99\n1\n0\n3.0\n7.5\n-64.59343\n-16.666015\n1159320439\nQ750\nبوليفيا\nবলিভিয়া\nBolivien\nBolivia\nBolivia\nبولیوی\nBolivie\nΒολιβία\nבוליביה\nबोलिविया\nBolívia\nBolivia\nBolivia\nボリビア\n볼리비아\nBolivia\nBoliwia\nBolívia\nБоливия\nBolivia\nBolivya\nБолівія\nبولیویا\nBolivia\n玻利维亚\n玻利維亞\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n2\nPeru\nPER\n0\n2\nSovereign country\n1\nPeru\nPER\n0\nPeru\nPER\n0\nPeru\nPER\n0\nPeru\nPeru\nPER\nPeru\nNA\nPeru\nPE\nRepublic of Peru\nNA\nPeru\nNA\nNA\nPeru\nNA\n4\n4\n4\n11\n32510453\n15\n2019\n226848\n2019\n5. Emerging region: G20\n3. Upper middle income\nPE\nPE\nPE\nPER\nPER\n604\n604\n604\nPE\nPER\n23424919\n23424919\nExact WOE match as country\nPER\nNA\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\nPER\n-99\n-99\nSouth America\nAmericas\nSouth America\nLatin America & Caribbean\n4\n4\n4\n-99\n1\n0\n2.0\n7.0\n-72.90016\n-12.976679\n1159321163\nQ419\nبيرو\nপেরু\nPeru\nPeru\nPerú\nپرو\nPérou\nΠερού\nפרו\nपेरू\nPeru\nPeru\nPerù\nペルー\n페루\nPeru\nPeru\nPeru\nПеру\nPeru\nPeru\nПеру\nپیرو\nPeru\n秘鲁\n秘魯\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n2\nArgentina\nARG\n0\n2\nSovereign country\n1\nArgentina\nARG\n0\nArgentina\nARG\n0\nArgentina\nARG\n0\nArgentina\nArgentina\nARG\nArgentina\nNA\nArg.\nAR\nArgentine Republic\nNA\nArgentina\nNA\nNA\nArgentina\nNA\n3\n1\n3\n13\n44938712\n15\n2019\n445445\n2019\n5. Emerging region: G20\n3. Upper middle income\nAR\nAR\nAR\nARG\nARG\n032\n032\n032\nAR\nARG\n23424747\n23424747\nExact WOE match as country\nARG\nNA\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\nARG\n-99\n-99\nSouth America\nAmericas\nSouth America\nLatin America & Caribbean\n9\n9\n4\n-99\n1\n0\n2.0\n7.0\n-64.17333\n-33.501159\n1159320331\nQ414\nالأرجنتين\nআর্জেন্টিনা\nArgentinien\nArgentina\nArgentina\nآرژانتین\nArgentine\nΑργεντινή\nארגנטינה\nअर्जेण्टीना\nArgentína\nArgentina\nArgentina\nアルゼンチン\n아르헨티나\nArgentinië\nArgentyna\nArgentina\nАргентина\nArgentina\nArjantin\nАргентина\nارجنٹائن\nArgentina\n阿根廷\n阿根廷\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n3\n3\nUnited Kingdom\nGB1\n1\n2\nDependency\n1\nDhekelia Sovereign Base Area\nESB\n0\nDhekelia Sovereign Base Area\nESB\n0\nDhekelia Sovereign Base Area\nESB\n0\nDhekelia\nDhekelia\nESB\nDhekelia\nNA\nDhek.\nDH\nNA\nNA\nNA\nU.K.\nU.K. Base\nDhekelia Sovereign Base Area\nNA\n6\n6\n6\n3\n7850\n5\n2013\n314\n2013\n2. Developed region: nonG7\n2. High income: nonOECD\n-99\n-99\n-99\n-99\n-99\n-99\n-99\n-099\n-99\n-99\n-99\n-99\nNo WOE equivalent.\n-99\n1\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\nESB\n-99\n-99\nAsia\nAsia\nWestern Asia\nEurope & Central Asia\n8\n8\n5\n3\n-99\n0\n6.5\n11.0\n33.79058\n35.011042\n1159320709\nQ9206745\nديكيليا كانتونمنت\nদেখেলিয়া ক্যান্টনমেন্ট\nDekelia\nDhekelia Cantonment\nDekelia\nدکلیا\nDhekelia\nΝτεκέλια Κάντονμεντ\nדקליה\nढेकेलिया छावनी\nDekélia\nDhekelia Cantonment\nBase di Dhekelia\nデケリア\n데켈리아 지역\nDhekelia Cantonment\nDhekelia\nDeceleia\nДекелия\nDhekelia\nDhekelia Kantonu\nМуніципалітет Декелія\nدحیکیلیا کانتونمینٹ\nCăn cứ quân sự Dhekelia\n泽凯利亚军营\n德凱利亞軍營\nUnrecognized\n1\nAdmin-0 dependency\nAdmin-0 dependency\nAdmin-0 dependency\nNA\nAdmin-0 dependency\nNA\nNA\nNA\nNA\nNA\nAdmin-0 dependency\nAdmin-0 dependency\nNA\nNA\nNA\nNA\nNA\nNA\nAdmin-0 dependency\nNA\nNA\nAdmin-0 dependency\nNA\nAdmin-0 dependency\nNA\nAdmin-0 dependency\nAdmin-0 dependency\nAdmin-0 dependency\nAdmin-0 dependency\nAdmin-0 dependency\nNA\nAdmin-0 dependency\n\n\nAdmin-0 country\n1\n5\nCyprus\nCYP\n0\n2\nSovereign country\n1\nCyprus\nCYP\n0\nCyprus\nCYP\n0\nCyprus\nCYP\n0\nCyprus\nCyprus\nCYP\nCyprus\nNA\nCyp.\nCY\nRepublic of Cyprus\nNA\nCyprus\nNA\nNA\nCyprus\nNA\n1\n2\n3\n7\n1198575\n12\n2019\n24948\n2019\n6. Developing region\n2. High income: nonOECD\nCY\nCY\nCY\nCYP\nCYP\n196\n196\n196\nCY\nCYP\n-90\n23424994\nWOE lists as subunit of united Cyprus\nCYP\nNA\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\nCYP\n-99\n-99\nAsia\nAsia\nWestern Asia\nEurope & Central Asia\n6\n6\n4\n-99\n1\n0\n4.5\n9.5\n33.08418\n34.913329\n1159320533\nQ229\nقبرص\nসাইপ্রাস\nRepublik Zypern\nCyprus\nChipre\nقبرس\nChypre\nΚύπρος\nקפריסין\nसाइप्रस\nCiprus\nSiprus\nCipro\nキプロス\n키프로스\nCyprus\nCypr\nChipre\nКипр\nCypern\nKıbrıs Cumhuriyeti\nКіпр\nقبرص\nCộng hòa Síp\n塞浦路斯\n賽普勒斯\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n2\nIndia\nIND\n0\n2\nSovereign country\n1\nIndia\nIND\n0\nIndia\nIND\n0\nIndia\nIND\n0\nIndia\nIndia\nIND\nIndia\nNA\nIndia\nIND\nRepublic of India\nNA\nIndia\nNA\nNA\nIndia\nNA\n1\n3\n2\n2\n1366417754\n18\n2019\n2868929\n2019\n3. Emerging region: BRIC\n4. Lower middle income\nIN\nIN\nIN\nIND\nIND\n356\n356\n356\nIN\nIND\n23424848\n23424848\nExact WOE match as country\nIND\nNA\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\nIND\n-99\n-99\nAsia\nAsia\nSouthern Asia\nSouth Asia\n5\n5\n5\n-99\n1\n0\n1.7\n6.7\n79.35810\n22.686852\n1159320847\nQ668\nالهند\nভারত\nIndien\nIndia\nIndia\nهند\nInde\nΙνδία\nהודו\nभारत\nIndia\nIndia\nIndia\nインド\n인도\nIndia\nIndie\nÍndia\nИндия\nIndien\nHindistan\nІндія\nبھارت\nẤn Độ\n印度\n印度\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nAdmin-0 country\n0\n2\nChina\nCH1\n1\n2\nCountry\n1\nChina\nCHN\n0\nChina\nCHN\n0\nChina\nCHN\n0\nChina\nChina\nCHN\nChina\nNA\nChina\nCN\nPeople’s Republic of China\nNA\nChina\nNA\nNA\nChina\nNA\n4\n4\n4\n3\n1397715000\n18\n2019\n14342903\n2019\n3. Emerging region: BRIC\n3. Upper middle income\nCH\nCN\nCN\nCHN\nCHN\n156\n156\n156\nCN\nCHN\n23424781\n23424781\nExact WOE match as country\nCHN\nNA\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nTWN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\nCHN\n-99\n-99\nAsia\nAsia\nEastern Asia\nEast Asia & Pacific\n5\n5\n5\n-99\n1\n0\n1.7\n5.7\n106.33729\n32.498178\n1159320471\nQ148\nالصين\nগণচীন\nVolksrepublik China\nPeople’s Republic of China\nChina\nجمهوری خلق چین\nRépublique populaire de Chine\nΛαϊκή Δημοκρατία της Κίνας\nהרפובליקה העממית של סין\nचीनी जनवादी गणराज्य\nKína\nRepublik Rakyat Tiongkok\nCina\n中華人民共和国\n중화인민공화국\nVolksrepubliek China\nChińska Republika Ludowa\nChina\nКитайская Народная Республика\nKina\nÇin Halk Cumhuriyeti\nКитайська Народна Республіка\nعوامی جمہوریہ چین\nTrung Quốc\n中华人民共和国\n中華人民共和國\nAdmin-0 country\nNA\nAdmin-0 country\nNA\nNA\nNA\nNA\nNA\nUnrecognized\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\n\n\n\n\nFor this tutorial we want to focus on a European countries, hence we need to filter the data to only contain the European countries’ info. Fortunately, the map_data contains a feature CONTINTENT, so we can easily filter out the unwanted countries.\n\n\neurope_map_data &lt;- map_data %&gt;%\n    select(NAME, CONTINENT, SUBREGION, POP_EST) %&gt;%\n    filter(CONTINENT == \"Europe\")\n\n\nLets try to plot a map of European countries. New versions of ggplot2 contain a function geom_sf which supports plotting sf objects directly, so lets try it…\n\n\nggplot(europe_map_data) + geom_sf() +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\nThat does not seem to work… the reason is that, even though we removed the data of non European countries, we never changed the bbox setting of our data. The bbox object sets the longitude and latitude range for our plot, which is still for the whole Europe. To change this we can use the st_crop function as\n\n\neurope_map_data &lt;- europe_map_data %&gt;%\n    st_crop(xmin=-25, xmax=55, ymin=35, ymax=71)\n\n\nggplot(europe_map_data) + geom_sf() +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\nIf you’re familiar with the ggplot2 workflow, it is now easy to construct the aesthetic mappings like you’re used to. Our map_data contains a feature SUBREGION and Europe is divided into Northern, Eastern, Southern and Western Europe. We can easily visualize this in our European map as\n\n\nggplot(europe_map_data) + geom_sf(aes(fill=SUBREGION)) +\n    theme_minimal()",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Europian regions with `naturalearth` data</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Lovelace, R., Nowosad, J., and Muenchow, J. (2019). Geocomputation with R. CRC Press.\nComber, L., and Brunsdon, C. (2020). Geographical Data Science and Spatial Data Analysis: An Introduction in R. Sage.\nKopczewska, K. (2020). Applied Spatial Statistics and Econometrics: Data Analysis in R. Routledge.",
    "crumbs": [
      "References"
    ]
  }
]