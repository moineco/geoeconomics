{
  "hash": "6d0c62ef58e5ae0f14acb855f37b830b",
  "result": {
    "engine": "knitr",
    "markdown": "# Population distribution of Alaska\n\nCredit: Reproducible Research Techniques for Synthesis: Matt Jones\n\nThe sf package is an R implementation of Simple Features. This package incorporates:\n\n-   a new spatial data class system in R\n-   functions for reading and writing data\n-   tools for spatial operations on vectors\n\nMost of the functions in this package starts with prefix st\\_ which stands for spatial and temporal.\n\nOur goal is to use a shapefile of Alaska regions and data on population in Alaska by community to create a map.\n\nLoad necessary packages with `pacman` package manager\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npacman::p_load(sf, dplyr, ggplot2, scales, ggmap)\n```\n:::\n\n\n\n\n\n\n\n\n-   Plot the shapefile of Alaska\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n## Read in shapefile using sf\nak_regions <- read_sf(\"data/shapefile/alaska/ak_regions_simp.shp\")\nplot(ak_regions)  \n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   Examine it's class.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nclass(ak_regions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   See the data structure\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhead(ak_regions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.2296 ymin: 51.15702 xmax: 179.8567 ymax: 71.43957\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 4\n  region_id region           mgmt_area                                  geometry\n      <int> <chr>                <dbl>                        <MULTIPOLYGON [°]>\n1         1 Aleutian Islands         3 (((-171.1345 52.44974, -171.1686 52.4174…\n2         2 Arctic                   4 (((-139.9552 68.70597, -139.9893 68.7051…\n3         3 Bristol Bay              3 (((-159.8745 58.62778, -159.8654 58.6137…\n4         4 Chignik                  3 (((-155.8282 55.84638, -155.8049 55.8655…\n5         5 Copper River             2 (((-143.8874 59.93931, -143.9165 59.9403…\n6         6 Kodiak                   3 (((-151.9997 58.83077, -152.0358 58.8271…\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   View what crs is set by using the function st_crs\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nst_crs(ak_regions)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   This data has a greographic coordinate system (WGS84) with no projection. Let us use the Alaska Albers projection, with an EPSG code of 3338.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nak_regions_3338 <- ak_regions %>%\n  st_transform(crs = 3338)\n\nst_crs(ak_regions_3338)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3338 \n  wkt:\nPROJCRS[\"NAD83 / Alaska Albers\",\n    BASEGEOGCRS[\"NAD83\",\n        DATUM[\"North American Datum 1983\",\n            ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4269]],\n    CONVERSION[\"Alaska Albers (meter)\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"easting (X)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"northing (Y)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Topographic mapping (small scale).\"],\n        AREA[\"United States (USA) - Alaska.\"],\n        BBOX[51.3,172.42,71.4,-129.99]],\n    ID[\"EPSG\",3338]]\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   Plot it with Alaska Albers projection\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nplot(ak_regions_3338)\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsummary(ak_regions_3338)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   region_id     region            mgmt_area          geometry \n Min.   : 1   Length:13          Min.   :1   MULTIPOLYGON :13  \n 1st Qu.: 4   Class :character   1st Qu.:2   epsg:3338    : 0  \n Median : 7   Mode  :character   Median :3   +proj=aea ...: 0  \n Mean   : 7                      Mean   :3                     \n 3rd Qu.:10                      3rd Qu.:4                     \n Max.   :13                      Max.   :4                     \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   Since sf objects are dataframes, they play nicely with packages in the tidyverse. Here are a couple of simple examples:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nak_regions_3338 %>%\n  select(region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 13 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -2175328 ymin: 405653 xmax: 1579226 ymax: 2383770\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 13 × 2\n   region                                                               geometry\n   <chr>                                                      <MULTIPOLYGON [m]>\n 1 Aleutian Islands     (((-1156666 420855.1, -1159837 417990.3, -1161898 41694…\n 2 Arctic               (((571289.9 2143072, 569941.5 2142691, 569158.2 2142146…\n 3 Bristol Bay          (((-339688.6 973904.9, -339302 972297.3, -339229.2 9710…\n 4 Chignik              (((-114381.9 649966.8, -112866.8 652065.8, -108836.8 65…\n 5 Copper River         (((561012 1148301, 559393.7 1148169, 557797.7 1148492, …\n 6 Kodiak               (((115112.5 983293, 113051.3 982825.9, 110801.3 983211.…\n 7 Kotzebue             (((-678815.3 1819519, -677555.2 1820698, -675557.8 1821…\n 8 Kuskokwim            (((-1030125 1281198, -1029858 1282333, -1028980 1284032…\n 9 Cook Inlet           (((35214.98 1002457, 36660.3 1002038, 36953.11 1001186,…\n10 Norton Sound         (((-848357 1636692, -846510 1635203, -840513.7 1632225,…\n11 Prince William Sound (((426007.1 1087250, 426562.5 1088591, 427711.6 1089991…\n12 Southeast            (((1287777 744574.1, 1290183 745970.8, 1292940 746262.7…\n13 Yukon                (((-375318 1473998, -373723.9 1473487, -373064.8 147393…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nak_regions_3338 %>%\n  filter(region == \"Southeast\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 559475.7 ymin: 722450 xmax: 1579226 ymax: 1410576\nProjected CRS: NAD83 / Alaska Albers\n# A tibble: 1 × 4\n  region_id region    mgmt_area                                         geometry\n*     <int> <chr>         <dbl>                               <MULTIPOLYGON [m]>\n1        12 Southeast         1 (((1287777 744574.1, 1290183 745970.8, 1292940 …\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   How many people live in each of these Alaska regions? Let us check the data:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop <- read.csv(\"data/csv/alaska_population.csv\")\n```\n:::\n\n\n\n\n\n\n\n\n-   Although it isn't said anywhere explicitly in the file, let's assume that the coordinate system used to reference the latitude longitude coordinates is WGS84, which has a crs number of 4236.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_4326 <- st_as_sf(pop, \n                  coords = c('lng', 'lat'),\n                  crs = 4326,\n                  remove = F)\n\nhead(pop_4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -176.6581 ymin: 51.88 xmax: -154.1703 ymax: 62.68889\nGeodetic CRS:  WGS 84\n  year     city      lat       lng population                   geometry\n1 2015     Adak 51.88000 -176.6581        122    POINT (-176.6581 51.88)\n2 2015   Akhiok 56.94556 -154.1703         84 POINT (-154.1703 56.94556)\n3 2015 Akiachak 60.90944 -161.4314        562 POINT (-161.4314 60.90944)\n4 2015    Akiak 60.91222 -161.2139        399 POINT (-161.2139 60.91222)\n5 2015   Akutan 54.13556 -165.7731        899 POINT (-165.7731 54.13556)\n6 2015 Alakanuk 62.68889 -164.6153        777 POINT (-164.6153 62.68889)\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n```default\npop_joined <- st_join(pop_4326, ak_regions_3338, join = st_within)\n```\n\n-   This gives an error!\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_3338 <- st_transform(pop_4326, crs = 3338)\n```\n:::\n\n\n\n\n\n\n\n\n-   Turns out, this won't work right now because our coordinate reference systems are not the same. Luckily, this is easily resolved using st_transform, and projecting our population object into Alaska Albers.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_joined <- st_join(pop_3338, ak_regions_3338, join = st_within)\n\nhead(pop_joined)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 8 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -1537925 ymin: 472626.9 xmax: -10340.71 ymax: 1456223\nProjected CRS: NAD83 / Alaska Albers\n  year     city      lat       lng population region_id           region\n1 2015     Adak 51.88000 -176.6581        122         1 Aleutian Islands\n2 2015   Akhiok 56.94556 -154.1703         84         6           Kodiak\n3 2015 Akiachak 60.90944 -161.4314        562         8        Kuskokwim\n4 2015    Akiak 60.91222 -161.2139        399         8        Kuskokwim\n5 2015   Akutan 54.13556 -165.7731        899         1 Aleutian Islands\n6 2015 Alakanuk 62.68889 -164.6153        777        13            Yukon\n  mgmt_area                   geometry\n1         3  POINT (-1537925 472626.9)\n2         3 POINT (-10340.71 770998.4)\n3         4  POINT (-400885.5 1236460)\n4         4  POINT (-389165.7 1235475)\n5         3 POINT (-766425.7 526057.8)\n6         4  POINT (-539724.9 1456223)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_region <- pop_joined %>% \n  as.data.frame() %>% \n  group_by(region) %>% \n  summarise(total_pop = sum(population))\n\nhead(pop_region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  region           total_pop\n  <chr>                <int>\n1 Aleutian Islands      8840\n2 Arctic                8419\n3 Bristol Bay           6947\n4 Chignik                311\n5 Cook Inlet          408254\n6 Copper River          2294\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   And use a regular left_join to get the information back to the Alaska region shapefile.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_region_3338 <- left_join(ak_regions_3338, pop_region)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(region)`\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   Plot to check\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#plot to check\nplot(pop_region_3338[\"total_pop\"])\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   Say we want to calculate the population by Alaska management area, as opposed to region.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_mgmt_338 <- pop_region_3338 %>% \n  group_by(mgmt_area) %>% \n  summarize(total_pop = sum(total_pop))\n\nplot(pop_mgmt_338[\"total_pop\"])\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   Notice that the region geometries were combined into a single polygon for each management area. If we don't want to combine geometries, we can specifcy do_union = F as an argument.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npop_mgmt_3338 <- pop_region_3338 %>% \n  group_by(mgmt_area) %>% \n  summarize(total_pop = sum(total_pop), do_union = F)\n\nplot(pop_mgmt_3338[\"total_pop\"])\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n```default\nwrite_sf(pop_region_3338, \"shapefiles/ak_regions_population.shp\", delete_layer = TRUE)\n```\n\n-   Visualize with ggplot. It now has integrated functionality to plot sf objects using geom_sf(). We can plot sf objects just like regular data.frames using geom_sf.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot(pop_region_3338) +\n  geom_sf(aes(fill = total_pop)) +\n  theme_bw() +\n  labs(fill = \"Total Population\") +\n  scale_fill_continuous(low = \"khaki\", high =  \"firebrick\", labels = comma)\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   The rivers shapefile is a simplified version of Jared Kibele and Jeanette Clark.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nrivers_3338 <- read_sf(\"data/shapefile/alaska/ak_rivers_simp.shp\")\nst_crs(rivers_3338)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: Albers \n  wkt:\nPROJCRS[\"Albers\",\n    BASEGEOGCRS[\"GCS_GRS 1980(IUGG, 1980)\",\n        DATUM[\"unknown\",\n            ELLIPSOID[\"GRS80\",6378137,298.257222101,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Albers Equal Area\",\n            ID[\"EPSG\",9822]],\n        PARAMETER[\"Latitude of false origin\",50,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8821]],\n        PARAMETER[\"Longitude of false origin\",-154,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8822]],\n        PARAMETER[\"Latitude of 1st standard parallel\",55,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8823]],\n        PARAMETER[\"Latitude of 2nd standard parallel\",65,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8824]],\n        PARAMETER[\"Easting at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8826]],\n        PARAMETER[\"Northing at false origin\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8827]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   Note that although no EPSG code is set explicitly, with some sluething we can determine that this is EPSG:3338. This site is helpful for looking up EPSG codes.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nggplot() +\n  geom_sf(data = pop_region_3338, aes(fill = total_pop)) +\n  geom_sf(data = rivers_3338, aes(size = StrOrder), color = \"black\") +\n  geom_sf(data = pop_3338, aes(), size = .5) +\n  scale_size(range = c(0.01, 0.2), guide = F) +\n  theme_bw() +\n  labs(fill = \"Total Population\") +\n  scale_fill_continuous(low = \"khaki\", high =  \"firebrick\", labels = comma)\n```\n\n::: {.cell-output-display}\n![](lecture_7_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "lecture_7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}