{
  "hash": "ebe1b90f700ee7a836ae48abd6976517",
  "result": {
    "engine": "knitr",
    "markdown": "# Spatial data operations\n\nThe following packages will be required for this chapter:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npacman::p_load(tidyverse, maps, jpndistrict, countrycode)\n```\n:::\n\n\n-   As of January 25, 2021, `jpndistrict` has been removed from CRAN, so if you really want to install it, please install it directly from the github repository. To install, please use the following code in your `Console`:\n\n\n::: {.cell codcode-fold='false'}\n\n```{.txt .cell-code}\ninstall.packages(\"remotes\")\nremotes::install_github(\"uribo/jpndistrict\")\n```\n:::\n\n\n### World map\n\n-   The `maps` package contains data for the world, USA, France, Italy and New Zealand. It contains information such as latitude, longitude, group, region, etc. like this.\n\n-   First call the world map data\n\n-   You can see the data structure by using `head` command.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map <- map_data(\"world\")\nhead(world_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       long      lat group order region subregion\n1 -69.89912 12.45200     1     1  Aruba      <NA>\n2 -69.89571 12.42300     1     2  Aruba      <NA>\n3 -69.94219 12.43853     1     3  Aruba      <NA>\n4 -70.00415 12.50049     1     4  Aruba      <NA>\n5 -70.06612 12.54697     1     5  Aruba      <NA>\n6 -70.05088 12.59707     1     6  Aruba      <NA>\n```\n\n\n:::\n:::\n\n\n-   By using the `ggplot2` boundaries can be drawn with `geom_polygon()` with latitude and longitude as shown in @fig-mymap-12.1\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map %>% \n  ggplot(aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"lightgray\", colour = \"black\", size = 0.1) \n```\n\n::: {.cell-output-display}\n![World countries](lecture_3_files/figure-html/fig-mymap-12.1-1.png){#fig-mymap-12.1 width=672}\n:::\n:::\n\n\n### Japan map\n\n-   If we limit the data with `filter()`, we can also draw a map of specific countries.\n\n-   For instance, we will filter the data for Japan and draw a map as shown in @fig-mymap-12.2\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map %>% \n  filter(region == \"Japan\") %>% \n  ggplot(aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"lightgray\", colour = \"black\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![Japan](lecture_3_files/figure-html/fig-mymap-12.2-1.png){#fig-mymap-12.2 width=672}\n:::\n:::\n\n\n-   Unfortunately `maps` package only have the country level information.\n\n-   If you want to draw a map of prefectures, use the `jpnprefs` package. There is a list of prefectures in the `jpnprefs` attached to the package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nhead(jpnprefs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 11\n  jis_code prefecture capital region major_island prefecture_en capital_en  \n  <chr>    <fct>      <chr>   <chr>  <chr>        <chr>         <chr>       \n1 01       北海道     札幌市  北海道 北海道       Hokkaido      Sapporo-shi \n2 02       青森県     青森市  東北   本州         Aomori-ken    Aomori-shi  \n3 03       岩手県     盛岡市  東北   本州         Iwate-ken     Morioka-shi \n4 04       宮城県     仙台市  東北   本州         Miyagi-ken    Sendai-shi  \n5 05       秋田県     秋田市  東北   本州         Akita-ken     Akita-shi   \n6 06       山形県     山形市  東北   本州         Yamagata-ken  Yamagata-shi\n# ℹ 4 more variables: region_en <chr>, major_island_en <chr>,\n#   capital_latitude <dbl>, capital_longitude <dbl>\n```\n\n\n:::\n:::\n\n\n-   Table 1 represents the prefecture numbers in `jpnprefs` package\n\n    | Prefecture | Code | prefecture | Code | Prefecture | Code |\n    |------------|------|------------|------|------------|------|\n    | Hokkaidō   | 1    | Ishikawa   | 17   | Okayama    | 33   |\n    | Aomori     | 2    | Fukui      | 18   | Hiroshima  | 34   |\n    | Iwate      | 3    | Yamanashi  | 19   | Yamaguchi  | 35   |\n    | Miyagi     | 4    | Nagano     | 20   | Tokushima  | 36   |\n    | Akita      | 5    | Gifu       | 21   | Kagawa     | 37   |\n    | Yamagata   | 6    | Shizuoka   | 22   | Ehime      | 38   |\n    | Fukushima  | 7    | Aichi      | 23   | Kōchi      | 39   |\n    | Ibaraki    | 8    | Mie        | 24   | Fukuoka    | 40   |\n    | Tochigi    | 9    | Shiga      | 25   | Saga       | 41   |\n    | Gunma      | 10   | Kyōto      | 26   | Nagasaki   | 42   |\n    | Saitama    | 11   | Ōsaka      | 27   | Kumamoto   | 43   |\n    | Chiba      | 12   | Hyōgo      | 28   | Ōita       | 44   |\n    | Tōkyō      | 13   | Nara       | 29   | Miyazaki   | 45   |\n    | Kanagawa   | 14   | Wakayama   | 30   | Kagoshima  | 46   |\n    | Niigata    | 15   | Tottori    | 31   | Okinawa    | 47   |\n    | Toyama     | 16   | Shimane    | 32   |            |      |\n\n-   To pull the prefecture data, enter the number of the prefecture corresponding to `jpn_pref()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nkochi <- jpn_pref(39)\nhead(kochi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 133.1751 ymin: 33.24061 xmax: 134.2378 ymax: 33.72044\nGeodetic CRS:  WGS 84\n# A tibble: 6 × 5\n  pref_code prefecture city_code city                                   geometry\n  <chr>     <chr>      <chr>     <chr>                        <MULTIPOLYGON [°]>\n1 39        高知県     39201     高知市 (((133.4129 33.58615, 133.4009 33.59435…\n2 39        高知県     39202     室戸市 (((134.0336 33.3771, 134.0337 33.37847,…\n3 39        高知県     39203     安芸市 (((133.8213 33.5194, 133.8251 33.52551,…\n4 39        高知県     39204     南国市 (((133.5803 33.6502, 133.5793 33.64468,…\n5 39        高知県     39205     土佐市 (((133.4554 33.41864, 133.4556 33.4188,…\n6 39        高知県     39206     須崎市 (((133.3155 33.32523, 133.3165 33.32524…\n```\n\n\n:::\n:::\n\n\n-   We use `geom_sf()` because the boundaries of municipalities are a standard called simple features (sf).\n\n-   We can draw a map of Kochi prefecture of Japan which consists all the cities. As shown in @fig-mymap-12.3, we can plot the boundaries of the cities inside Kochi Prefecture.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nkochi %>% \n  ggplot() + \n  geom_sf()\n```\n\n::: {.cell-output-display}\n![Kochi prefecture of Japan](lecture_3_files/figure-html/fig-mymap-12.3-1.png){#fig-mymap-12.3 width=672}\n:::\n:::\n\n\n-   By using additional feature of `geom_sf`, we can improve the visualization of the map as @fig-mymap-12.4\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nkochi %>% \n  ggplot() + \n  geom_sf(aes(fill = city), show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![Kochi prefecture of Japan with random color](lecture_3_files/figure-html/fig-mymap-12.4-1.png){#fig-mymap-12.4 width=672}\n:::\n:::\n\n\n-   By using geom_point feature, we can specify the capital of the Kochi prefecture as @fig-mymap-12.5\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nkochi %>% \n  ggplot() + \n  geom_sf(aes(fill = city), show.legend = FALSE) +\n   geom_point(aes(x = capital_longitude, y = capital_latitude),\n             colour = \"black\", data = jpnprefs %>% filter(prefecture == \"高知県\"))\n```\n\n::: {.cell-output-display}\n![Kochi prefecture of Japan with random color and capital](lecture_3_files/figure-html/fig-mymap-12.5-1.png){#fig-mymap-12.5 width=672}\n:::\n:::\n",
    "supporting": [
      "lecture_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}