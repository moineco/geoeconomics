{
  "hash": "92d3c57817a19954e3eada031b78e312",
  "result": {
    "engine": "knitr",
    "markdown": "# Spatial data operations\n\nThe following packages will be required for this chapter:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npacman::p_load(tidyverse, maps, jpndistrict, countrycode)\n```\n:::\n\n\n\n\n\n\n\n\n-   As of January 25, 2021, `jpndistrict` has been removed from CRAN, so if you really want to install it, please install it directly from the github repository. To install, please use the following code in your `Console`:\n\n\n\n\n\n\n\n\n::: {.cell codcode-fold='false'}\n\n```{.txt .cell-code}\ninstall.packages(\"remotes\")\nremotes::install_github(\"uribo/jpndistrict\")\n```\n:::\n\n\n\n\n\n\n\n\n### World map\n\n-   The `maps` package contains data for the world, USA, France, Italy and New Zealand. It contains information such as latitude, longitude, group, region, etc. like this.\n\n-   First call the world map data\n\n-   You can see the data structure by using `head` command.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map <- map_data(\"world\")\nhead(world_map)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       long      lat group order region subregion\n1 -69.89912 12.45200     1     1  Aruba      <NA>\n2 -69.89571 12.42300     1     2  Aruba      <NA>\n3 -69.94219 12.43853     1     3  Aruba      <NA>\n4 -70.00415 12.50049     1     4  Aruba      <NA>\n5 -70.06612 12.54697     1     5  Aruba      <NA>\n6 -70.05088 12.59707     1     6  Aruba      <NA>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n-   By using the `ggplot2` boundaries can be drawn with `geom_polygon()` with latitude and longitude as shown in @fig-mymap-12.1\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map %>% \n  ggplot(aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"lightgray\", colour = \"black\", size = 0.1) \n```\n\n::: {.cell-output-display}\n![World countries](lecture_3_files/figure-html/fig-mymap-12.1-1.png){#fig-mymap-12.1 width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n### Japan map\n\n-   If we limit the data with `filter()`, we can also draw a map of specific countries.\n\n-   For instance, we will filter the data for Japan and draw a map as shown in @fig-mymap-12.2\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld_map %>% \n  filter(region == \"Japan\") %>% \n  ggplot(aes(x = long, y = lat, group = group)) +\n  geom_polygon(fill = \"lightgray\", colour = \"black\", size = 0.1)\n```\n\n::: {.cell-output-display}\n![Japan](lecture_3_files/figure-html/fig-mymap-12.2-1.png){#fig-mymap-12.2 width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   Unfortunately `maps` package only have the country level information.\n\n-   If you want to draw a map of prefectures, use the `jpnprefs` package. There is a list of prefectures in the `jpnprefs` attached to the package.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#head(jpnprefs)\n```\n:::\n\n\n\n\n\n\n\n\n-   Table 1 represents the prefecture numbers in `jpnprefs` package\n\n    | Prefecture | Code | prefecture | Code | Prefecture | Code |\n    |------------|------|------------|------|------------|------|\n    | Hokkaidō   | 1    | Ishikawa   | 17   | Okayama    | 33   |\n    | Aomori     | 2    | Fukui      | 18   | Hiroshima  | 34   |\n    | Iwate      | 3    | Yamanashi  | 19   | Yamaguchi  | 35   |\n    | Miyagi     | 4    | Nagano     | 20   | Tokushima  | 36   |\n    | Akita      | 5    | Gifu       | 21   | Kagawa     | 37   |\n    | Yamagata   | 6    | Shizuoka   | 22   | Ehime      | 38   |\n    | Fukushima  | 7    | Aichi      | 23   | Kōchi      | 39   |\n    | Ibaraki    | 8    | Mie        | 24   | Fukuoka    | 40   |\n    | Tochigi    | 9    | Shiga      | 25   | Saga       | 41   |\n    | Gunma      | 10   | Kyōto      | 26   | Nagasaki   | 42   |\n    | Saitama    | 11   | Ōsaka      | 27   | Kumamoto   | 43   |\n    | Chiba      | 12   | Hyōgo      | 28   | Ōita       | 44   |\n    | Tōkyō      | 13   | Nara       | 29   | Miyazaki   | 45   |\n    | Kanagawa   | 14   | Wakayama   | 30   | Kagoshima  | 46   |\n    | Niigata    | 15   | Tottori    | 31   | Okinawa    | 47   |\n    | Toyama     | 16   | Shimane    | 32   |            |      |\n\n-   To pull the prefecture data, enter the number of the prefecture corresponding to `jpn_pref()`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#kochi <- jpn_pref(39)\n#head(kochi)\n```\n:::\n\n\n\n\n\n\n\n\n-   We use `geom_sf()` because the boundaries of municipalities are a standard called simple features (sf).\n\n-   We can draw a map of Kochi prefecture of Japan which consists all the cities. As shown in @fig-mymap-12.3, we can plot the boundaries of the cities inside Kochi Prefecture.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#kochi %>% \n  # ggplot() + \n  # geom_sf()\n```\n:::\n\n\n\n\n\n\n\n\n-   By using additional feature of `geom_sf`, we can improve the visualization of the map as @fig-mymap-12.4\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#kochi %>% \n  # ggplot() + \n  # geom_sf(aes(fill = city), show.legend = FALSE)\n```\n:::\n\n\n\n\n\n\n\n\n-   By using geom_point feature, we can specify the capital of the Kochi prefecture as @fig-mymap-12.5\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n#kochi %>% \n  # ggplot() + \n  # geom_sf(aes(fill = city), show.legend = FALSE) +\n  #  geom_point(aes(x = capital_longitude, y = capital_latitude),\n  #            colour = \"black\", data = jpnprefs %>% filter(prefecture == \"高知県\"))\n```\n:::\n",
    "supporting": [
      "lecture_3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}