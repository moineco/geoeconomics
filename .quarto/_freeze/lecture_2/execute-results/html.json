{
  "hash": "0908e0444fcf6222969d92c5a1aad65c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Processing shapefiles\"\nauthor: Moinul Islam\ndate: today\n---\n\n\n\n\n\n\n\n\n## Shapefile in GIS\n\nShapefile is important for GIS (Geographic Information System) due to its widespread use and compatibility with various software applications. Here are a few key reasons:\n\n**Data Representation:** Shapefile is a popular file format for storing and sharing geospatial data. It allows the representation of complex geographic features such as points, lines, and polygons, along with their attributes.\n\n**Interoperability:** Shapefile is supported by a wide range of GIS software, making it highly inter-operable. It enables data exchange between different systems and facilitates collaboration among users who may be using different GIS platforms.\n\n**Attribute Management:** Shapefile supports the storage of attribute data associated with geographic features. This allows for the integration of non-spatial information, such as population, land use, or temperature, with spatial data, enabling comprehensive analysis and visualization.\n\n**Compact and Efficient:** Shapefiles are relatively small in size compared to other data formats, making them efficient for storing and transferring geospatial data. They are also capable of handling large data-sets without compromising performance.\n\n**Historical Significance:** Shapefile has been in use for several decades and has become a standard in the GIS community. Many legacy datasets and applications are based on shapefiles, making them crucial for historical data preservation and compatibility.\n\n## Shapefile and R\n\nShapefile is commonly used with R, a powerful programming language and software environment for statistical computing and graphics. Here's why shapefile is often preferred for use with R:\n\n**Native Support:** R has built-in support for reading, writing, and manipulating shapefiles. The \"sf\" package in R provides functions specifically designed for working with spatial data, including shapefiles. This native support simplifies the process of loading shapefiles into R and performing various spatial analyses.\n\n**Visualization Capabilities:** R offers extensive visualization capabilities for geospatial data. Packages like \"ggplot2\" and \"leaflet\" enable you to create high-quality maps and interactive visualizations using shapefiles as the data source. R's flexibility in customizing plots allows for advanced geospatial visualizations and exploration.\n\n> While shapefile is a common choice for working with spatial data in R, it's important to note that R also supports other geospatial file formats, such as GeoJSON and Geopackage. These formats may offer advantages like improved data compression, support for more advanced spatial features, and better inter-operability with certain software ecosystems.\n\n-   Use `pacman` to manage the R packages\n\n-   Using `packman` package enables us to install and load a package without typing `install.packges()` at Console on your RStudio\n\n-   You need to type the following command at Console on your RStudio\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.txt .cell-code}\ninstall.packages(\"pacman\")\n```\n:::\n\n\n\n\n\n\n\n\n-   The installation of necessary R packages:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\npacman::p_load(sf, tidyverse, rnaturalearth)\n```\n:::\n\n\n\n\n\n\n\n\n## Using `sf` package to make map\n\n-   Create data for world\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld <- ne_countries(scale = \"small\", returnclass = \"sf\")\n```\n:::\n\n\n\n\n\n\n\n\n-   First we use the familiar ggplot2 syntax. Like in any other ggplot, we have an x and a y axis, though in this case the correspond to longitude and latitude. Knowing this, we can use other ggplot2 commands to make our map more complex. Below we draw a horizontal line where the `yintercept` is at the equator.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld %>% \n  ggplot() + \n  geom_sf() +\n  geom_hline(yintercept = 0, linetype = \"dashed\") \n```\n\n::: {.cell-output-display}\n![](lecture_2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n-   World map with income groups\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nworld %>% \n  mutate(income_grp = factor(income_grp, ordered = T)) %>% \n  ggplot() + \n  geom_sf(aes(fill = income_grp)) +\n  theme_void() +\n  theme(legend.position = \"top\") +\n  labs(fill = \"Income Group:\") +\n  guides(fill=guide_legend(nrow=2, byrow=TRUE))\n```\n\n::: {.cell-output-display}\n![](lecture_2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n## Using `Shapefile` to make map\n\n-   First we will download the available shapefile of Japan from following website:\n\nhttps://data.humdata.org/dataset/cod-ab-jpn?\n\n-   Save the downloaded data into your GIS project inside a folder name `data`.\n\n-   We will read the shapefile and provide a name `shapefile_jpn`.\n\n-   We will plot the shapefile named `shapefile_jpn`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshapefile_jpn <- read_sf(\"data/jpn_shp_adm/jpn_admbnda_adm1_2019.shp\")\nplot(shapefile_jpn)\n```\n\n::: {.cell-output-display}\n![](lecture_2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "lecture_2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}